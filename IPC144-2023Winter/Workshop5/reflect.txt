///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #5
Full Name  : Jong wan Steven Hur
Student ID#: 122372220

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////


1.
From this workshop, we use three macros and 13 variables in total:

#define MIN_YEAR 2012
#define MAX_YEAR 2022
#define LOG_DAYS 3
const int JAN = 1, DEC = 12;
int year = 0, month = 0, i;
char m1, m2, m3;
double rate = -1.0, morningTotal = 0.0, eveningTotal = 0.0, morningAverage = 0.0, eveningAverage = 0.0;

The first advantage of using variables and macros allows users to provide input. In this workshop, we calculate the average and total number of user ratings.
Users kindly input the rating and it is impossible for us to guess what the input may be. Using variables, we can provide users with much more variety of 
choices.
The second advantage is that it significantly reduces time and effort. The minimum year is set to 2012 and the maximum year is set to 2022. The code 
itself works fine with the current setup but as time goes on, we will have to extend the maximum year to 2023 and 2024 for the year after and so on.
If I hardcoded the numbers, I would have to look for and change every single 2022 to 2023. However, in the workshop, I used the variable to declare the 
'MAX_YEAR' and used the variable for all the spots that needed 2022 so simply changing the value of 'MAX_YEAR' would finish the job.
Lastly, it is clearer to read and identify the code. Variables are always labeled with a data type which allows myself or others to recognize their function 
at first sight. Furthermore, variables are declared in self-explanatory names and it not only explains the function of the variable but also the function 
of the line or even the entire code block.




2.
rate = -0.1
while (rate < 0.0 || rate > 5.0)
        {
            printf("    Morning rating (0.0-5.0): ");
            scanf("%lf", &rate);
            if (rate < 0.0 || rate > 5.0)
            {
                printf("        ERROR: Rating must be between 0.0 and 5.0 inclusive!\n");
            }
        }
        morningTotal += rate; //sums the rate 

We do not include the average calculation in the validating iteration code block because only values must be checked if they are within the specified range
before we include the value in the average calculation. There are possibilities that the user may input an invalid value that is out of range. By adding the
validating iteration, it filters the invalid input and only if the user inputs the valid input that is within the range will be added to the total value. 
The program should be able to deal with all of the possibilities of a user's action. If we place calculating total and average logic inside of the validation 
routine, it will look like this :

rate = -0.1;
while (rate < 0.0 || rate > 5.0)
        {
            printf("    Morning rating (0.0-5.0): ");
            scanf("%lf", &rate);
            if (rate < 0.0 || rate > 5.0)
            {
                printf("        ERROR: Rating must be between 0.0 and 5.0 inclusive!\n");
            }
		morningTotal += rate; //sums the rate 
        }

You can see from the code above, validation occurs on while (rate < 0.0 || rate > 5.0). Since the original value of 'rate' is declared as -0.1, it will 
jump into the while loop and ask a user to enter a value. As a user enters the value, it will be stored in the 'rate', and if statement will check if the
value is lower than 0.0 or greater than 5.0. For the explanation, I will assume that the user entered 5.5 which means the 'rate' is 5.5. When it reaches the 
end of the code block, it will iterate the process and get validated by the while-loop condition. However, if total calculation is included in the iteration process,
5.5 would be added to the 'morningTotal' even before it gets validated. Therefore, we must place total and average calculations outside of the iteration. 
