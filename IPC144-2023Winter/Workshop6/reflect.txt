///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #6
Full Name  : Jong wan Steven Hur
Student ID#: 122372220

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1.
The three types of iteration constructs are the for, while, and do-while loops. While it may be behaive in similar way with any of these constructs, 
each one has its own strengths and use cases.
- for loops are generally used when you know how many times you want to iterate beforehand. They are useful for iterating over a fixed range of values or 
a collection of items with a known size. The syntax for for loops often allows for compact and readable code, and they can be optimized by the compiler to 
run faster in some cases. For example, on line 91 of my code, I used for loop instead of other iteration constructs because I know how many times I want to
iterate to display the chart. Since my intention is to display all of the item priority, finance options and costs, I can set the maximum number of iteration
to the number of lists that user input beforehand.
- while loops are useful when you want to iterate until a specific condition is met, but you don't necessarily know how many iterations will be required. 
They are often used for tasks such as input validation, where you keep asking the user for input until they provide a valid value. while loops can also be
 useful in situations where the termination condition is more complex than a simple range check. I did not use any of while loops in my code because I thought
do-while is more effective with this workshop.
- do-while loops are similar to while loops, but they are guaranteed to execute at least once, even if the termination condition is false from the start. 
This can be useful when you need to execute a block of code at least once, such as prompting the user for input before validating it. do-while loops can 
also be useful in situations where you need to perform some setup or initialization before checking the termination condition. I used do-whiles for all of
my validating iterations. From line 61 to 84, I used do-while to validate user's input of item cost, priority, and finance options. I do not know how many
times user will provide wrong input so I will have to use do-while to iterate until user input the correct number or character. 

The iteration construct that is typically favored when working with arrays is the for loop. The reason why for loop is preferred over the other options is 
that the for loops provide a convenient way to iterate over a fixed range of values. Since arrays have a fixed size, it is often useful to iterate over 
all the elements of an array, and the for loop provides a compact and readable way to do this. Secondly, for loops provide an index variable that can be 
used to access the elements of an array. By using the index variable, you can easily access each element of the array in turn, and perform some operation 
on each element. Lastly, for loops can be used to iterate over a subset of an array. For example, you can start the loop at a specific index, and end it 
at another index, allowing you to iterate over a specific range of elements in the array.


2.
Syntax errors are detected by the compiler or interpreter and will prevent the program from running. The error message generated by the compiler 
will typically provide information about the location. To fix the error, I would review the code at the location specified in the error message and 
correct the syntax. For an instance, I forgot to declare the variable 'i' and used it to write a for loop. Also, on line 136, I forgot to declare
'priorityTotalCost'variable as 0.0 and added it to a arithmatic calculation on line 148 so the complier produced an error. 
On the other hand, semantic errors are more difficult to identify than syntax errors since the program may still run but produce incorrect results. 
To locate semantic errors, I would use print statements, or a debugger to trace the program's execution and identify the location of the error.
My personal favourite way of fixing semantic error is using the print statements. On line 62, 71 and 79, there is a validating literation. Not on this
workshop but previously I have an experience that the while condition or if condition was broken so the program did not execute those conditions correctly.
To prevent these cases, I always add print statements inside the do-while iteration and if statement to check if the code is correctly executed.
In addition, using print statement is very useful when checking the array iteration. on line 148, cost[i] is being added to priorityTotalCost when 
productPriority[i] is equal to priority. I put print statment right after the calculation so I can visually check if the priorityTotalCost is correctly
being calculated and updated.

3.
1 - Open your output.txt file and locate the line number mentioned in the error message, which is line 6 in this case.

2 - Compare the contents of line 6 in your output.txt file with the expected output, which is "Enter your monthly NET income: $0".  
    It is important to pay attention to every character, such as spaces and capitalization

3 - Check if there are any typing mistakes or formatting error in the line. In this case, you should notice that the output in your file has 
    the value "567.89" instead of "0". The error message explicitly highlights the unmatched character details where the character in column 33 
    is different from the expected value.

4  After re-submitting, ensure to check the feedback provided to verify that the issue has been fixed and that there are no further errors or issues.